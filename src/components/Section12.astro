<!-- https://text-to-svg.com/ -->

<script>
    import { gsap } from "@/lib/gsap";
  import MotionPathPlugin from "gsap/MotionPathPlugin";
  import DrawSVGPlugin from "gsap/DrawSVGPlugin";

  gsap.registerPlugin(MotionPathPlugin, DrawSVGPlugin);

  let paths: SVGPathElement[] = splitPaths("#am-text-ufficiami");

  let duration = 2;
  let distance = 0;
  let tl = gsap.timeline();

  paths.forEach((segment) => (distance += segment.getTotalLength()));

  paths.forEach((segment) => {
    tl.from(segment, {
      drawSVG: 0,
      ease: "none",
      duration: duration * (segment.getTotalLength() / distance),
    });
  });

  /**
   * Helper function that splits a <path> with multiple segments
   * into multiple <path> elements (split by "M" commands).
   */
  function splitPaths(selectorOrPath: string | SVGPathElement): SVGPathElement[] {
    const toSplit: SVGPathElement[] =
      typeof selectorOrPath === "string"
        ? (gsap.utils.toArray(selectorOrPath) as SVGPathElement[])
        : [selectorOrPath];

    let newPaths: SVGPathElement[] = [];

    if (toSplit.length > 1) {
      toSplit.forEach((path) => newPaths.push(...splitPaths(path)));
    } else {
      const path = toSplit[0];
      const rawPath: any[] = MotionPathPlugin.getRawPath(path); // GSAP devuelve array de segmentos
      const parent = path.parentNode as SVGElement;
      const attributes = Array.from(path.attributes);

      newPaths = rawPath.map((segment) => {
        const newPath = document.createElementNS("http://www.w3.org/2000/svg", "path");

        // Copiar atributos originales
        for (const attr of attributes) {
          newPath.setAttributeNS(null, attr.nodeName, attr.nodeValue!);
        }

        // Generar atributo "d" basado en el segmento
        newPath.setAttributeNS(
          null,
          "d",
          "M" +
            segment[0] +
            "," +
            segment[1] +
            "C" +
            segment.slice(2).join(",") +
            (segment.closed ? "z" : "")
        );

        parent.insertBefore(newPath, path);
        return newPath;
      });

      parent.removeChild(path);
    }

    return newPaths;
  }
</script>


<section class='am-section'>
  <svg
    xmlns='http://www.w3.org/2000/svg'
    viewBox='0 8.859999656677246 183.4499969482422 37.0099983215332'
    width='183.4499969482422'
    height='37.0099983215332'
    ><defs></defs><g fill='#000000'
      ><g
        ><path
          class='fill-outset-12'
          id='am-text-ufficiami'
          d='M23.41 9.47L28.15 9.47L28.15 30.15Q28.15 35.55 26.93 38.72Q25.71 41.89 22.52 43.88Q19.34 45.87 14.16 45.87Q9.13 45.87 5.93 44.14Q2.73 42.41 1.37 39.12Q0 35.84 0 30.15L0 9.47L4.74 9.47L4.74 30.13Q4.74 34.79 5.60 37.00Q6.47 39.21 8.58 40.41Q10.69 41.60 13.75 41.60Q18.97 41.60 21.19 39.23Q23.41 36.87 23.41 30.13L23.41 9.47ZM36.52 45.26L36.52 22.75L32.64 22.75L32.64 19.34L36.52 19.34L36.52 16.58Q36.52 13.96 36.99 12.70Q37.62 10.99 39.22 9.92Q40.82 8.86 43.70 8.86Q45.56 8.86 47.80 9.30L47.14 13.13Q45.78 12.89 44.56 12.89Q42.55 12.89 41.72 13.75Q40.89 14.60 40.89 16.94L40.89 19.34L45.95 19.34L45.95 22.75L40.89 22.75L40.89 45.26L36.52 45.26ZM49.51 45.26L49.51 22.75L45.63 22.75L45.63 19.34L49.51 19.34L49.51 16.58Q49.51 13.96 49.98 12.70Q50.61 10.99 52.21 9.92Q53.81 8.86 56.69 8.86Q58.54 8.86 60.79 9.30L60.13 13.13Q58.76 12.89 57.54 12.89Q55.54 12.89 54.71 13.75Q53.88 14.60 53.88 16.94L53.88 19.34L58.94 19.34L58.94 22.75L53.88 22.75L53.88 45.26L49.51 45.26ZM62.38 14.53L62.38 9.47L66.77 9.47L66.77 14.53L62.38 14.53M62.38 45.26L62.38 19.34L66.77 19.34L66.77 45.26L62.38 45.26ZM90.38 35.77L94.70 36.33Q93.99 40.80 91.08 43.32Q88.16 45.85 83.91 45.85Q78.59 45.85 75.35 42.37Q72.12 38.89 72.12 32.40Q72.12 28.20 73.51 25.05Q74.90 21.90 77.75 20.32Q80.59 18.75 83.94 18.75Q88.16 18.75 90.84 20.89Q93.53 23.02 94.29 26.95L90.01 27.61Q89.40 25 87.85 23.68Q86.30 22.36 84.11 22.36Q80.79 22.36 78.71 24.74Q76.64 27.12 76.64 32.28Q76.64 37.50 78.64 39.87Q80.64 42.24 83.86 42.24Q86.45 42.24 88.18 40.65Q89.92 39.06 90.38 35.77ZM98.49 14.53L98.49 9.47L102.88 9.47L102.88 14.53L98.49 14.53M98.49 45.26L98.49 19.34L102.88 19.34L102.88 45.26L98.49 45.26ZM126.49 42.07Q124.05 44.14 121.79 45.00Q119.53 45.85 116.94 45.85Q112.67 45.85 110.38 43.76Q108.08 41.67 108.08 38.43Q108.08 36.52 108.95 34.95Q109.81 33.37 111.22 32.42Q112.62 31.47 114.38 30.98Q115.67 30.64 118.29 30.32Q123.61 29.69 126.12 28.81Q126.15 27.91 126.15 27.66Q126.15 24.98 124.90 23.88Q123.22 22.39 119.90 22.39Q116.80 22.39 115.32 23.47Q113.84 24.56 113.13 27.32L108.84 26.73Q109.42 23.97 110.77 22.28Q112.11 20.58 114.65 19.67Q117.19 18.75 120.53 18.75Q123.85 18.75 125.93 19.53Q128.00 20.31 128.98 21.50Q129.96 22.68 130.35 24.49Q130.57 25.61 130.57 28.54L130.57 34.40Q130.57 40.53 130.85 42.15Q131.13 43.77 131.96 45.26L127.37 45.26Q126.68 43.90 126.49 42.07M126.12 32.25Q123.73 33.23 118.95 33.91Q116.24 34.30 115.11 34.79Q113.99 35.28 113.38 36.22Q112.77 37.16 112.77 38.31Q112.77 40.06 114.10 41.24Q115.43 42.41 117.99 42.41Q120.53 42.41 122.51 41.30Q124.49 40.19 125.42 38.26Q126.12 36.77 126.12 33.86L126.12 32.25ZM137.38 45.26L137.38 19.34L141.31 19.34L141.31 22.97Q142.53 21.07 144.56 19.91Q146.58 18.75 149.17 18.75Q152.05 18.75 153.89 19.95Q155.74 21.14 156.49 23.29Q159.57 18.75 164.50 18.75Q168.36 18.75 170.43 20.89Q172.51 23.02 172.51 27.47L172.51 45.26L168.14 45.26L168.14 28.93Q168.14 26.29 167.71 25.13Q167.29 23.97 166.16 23.27Q165.04 22.56 163.53 22.56Q160.79 22.56 158.98 24.38Q157.18 26.20 157.18 30.20L157.18 45.26L152.78 45.26L152.78 28.42Q152.78 25.49 151.71 24.02Q150.63 22.56 148.19 22.56Q146.34 22.56 144.76 23.54Q143.19 24.51 142.48 26.39Q141.77 28.27 141.77 31.81L141.77 45.26L137.38 45.26ZM179.05 14.53L179.05 9.47L183.45 9.47L183.45 14.53L179.05 14.53M179.05 45.26L179.05 19.34L183.45 19.34L183.45 45.26L179.05 45.26Z'
        ></path></g
      ></g
    ></svg
  >
</section>

<style>
  .am-section {
    height: 100vh;
    position: relative;
    background: conic-gradient(from -270deg at 75% 110%, fuchsia, floralwhite);
  }

  svg {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60%;
    height: 60%;
  }

  .group {
    display: inline;
    opacity: 1;
    mix-blend-mode: multiply;
  }

  .path {
    fill: none;
    stroke-linejoin: round;
  }

  .fill-inner {
    stroke: #000;
    stroke-width: 0.79375;
  }

  .fill-outset-12 {
    stroke: lime;
    stroke-width: 0.8px;

    &:nth-of-type(10) {
      fill: #ffbff4;
    }
  }
</style>
